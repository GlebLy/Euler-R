  sleduyuscij = sechasnyj + prededuscij;
  vectorFib[i] <- sleduyuscij;
  prededuscij = sechasnyj;
  summa <- summa + sleduyuscij;
  sechasnyj = sleduyuscij;
  i <- i+1;
}
vectorFib
summa
options(max.print = .Machine$integer.max)
vectorFib = numeric(4000000);
vectorFib[1] = 1;
vectorFib[2] = 2;
prededuscij = 1;
sechasnyj = 2;
sleduyuscij = 3;
summa = 3;
i = 3;
while(i<=10){
  sleduyuscij = sechasnyj + prededuscij;
  vectorFib[i] <- sleduyuscij;
  prededuscij = sechasnyj;
  summa <- summa + sleduyuscij;
  sechasnyj = sleduyuscij;
  i <- i+1;
}
vectorFib
summa
vectorFib[1] = 1;
vectorFib[2] = 2;
while(i<=10){
  sleduyuscij = sechasnyj + prededuscij;
  prededuscij = sechasnyj;
  sechasnyj = sleduyuscij;
  i <- i+1;
}
q()
x<-2^(0:10)
x
log2(x)
set.seed(42)
x<-sample(1:100,50)
x
x[-length(x)]
x[-1]-x[-length(x)]
k<-whith.max(abs(x[-1]-x[length(x)]))
k<-which.max(abs(x[-1]-x[length(x)]))
k
x[c(k,k+1)]
q()
q()
115*115
2999*11*2
131956/65978
q()
1e4
x<- 5
1ex
1e(x)
10^x
10^3-1
10^2-1
i < - 99
i <- 99
j <- 98
i%%11
i%%11==0
i%%11==0 | j%%11==0
i%%11==0 & j%%11==0
q()
kvadratKorni <- function(x) 1/(x+5) - 3*x
kvadratKorni((-5+(79/3)^.5)/2)
kvadratKorni <- function(f){f(x) = 0;return(x)}
f <- 1/(x+5) - 3*x
kvadratKorni(f)
kvadratKorni <- function(){ 1/(x+5) - 3*x = 0; return(x)}
kvadratKorni()
kvadratKorni <- function(){ x^2 - 3*x = 0; return(x)}
kvadratKorni()
polinom
polinom --h
polinom --help
help
kvadratKorni <- function(){ 1/(x+5) - 3*x = 0; return(x)}
ls()
vectorFib
ls.str()
?lm
 require(graphics)
     
     ## Annette Dobson (1990) "An Introduction to Generalized Linear Models".
     ## Page 9: Plant Weight Data.
     ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
     trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
     group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
     weight <- c(ctl, trt)
     lm.D9 <- lm(weight ~ group)
     lm.D90 <- lm(weight ~ group - 1) # omitting intercept
     
     anova(lm.D9)
     summary(lm.D90)
     
     opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
     plot(lm.D9, las = 1)      # Residuals, Fitted, ...
     par(opar)
     
     ### less simple examples in "See Also" above
5/0
getwd
getwd()
setwd("/home/gleb/git_workspace/R/"
)
getwd()
x
aschar(x)
as.char(x)
toString(x)
ls()
ls.str()
c <- toString(100)
length(c)
size(c)
ls.str()
size(c)
nchar(c)
c[1]
substr(c, 1)
substr(c, 1, 1)
substr(c, i, i)==substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)
substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)
substr(c, 2, 2)
substr(c, 3, 3)
substr(c, 4, 4)
i = 1
substr(c, i, i)==substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)
substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)
c = 101
as.character(c)
c<-as.character(c)
c
substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)
substr(c, i, i)==substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)
isPalindrom <- function(x){
  #as.character() или toString()
  c <- toString(x);
  i <- 1;
  while(i<nchar(c)){
    if(substr(c, i, i)==substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)){
      return(FALSE);
    }
    i <- i + 1;
  }
  return(TRUE);
}
isPalindrom(100)
isPalindrom(101)
isPalindrom <- function(x){
  #as.character() или toString()
  c <- toString(x);
  i <- 1;
  while(i<nchar(c)/2){
    if(substr(c, i, i)==substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)){
      return(FALSE);
    }
    i <- i + 1;
  }
  return(TRUE);
}
isPalindrom(101)
isPalindrom(103)
isPalindrom(100)
isPalindrom <- function(x){
  #as.character() или toString()
  c <- toString(x);
  i <- 1;
  while(i<nchar(c)/2){
    if(substr(c, i, i) != substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)){
      return(FALSE);
    }
    i <- i + 1;
  }
  return(TRUE);
}
isPalindrom(101)
isPalindrom(103)
isPalindrom(10)
  c <- toString(x);
i <- 1;
substr(c, i, i)
c
  c <- toString(10);
i <- 1;
substr(c, i, i)
substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)
substr(c, i, i) != substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)
isPalindrom(10)
isPalindrom <- function(x){
  #as.character() или toString()
  c <- toString(x);
  i <- 1;
  while(i<=nchar(c)/2){
    if(substr(c, i, i) != substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)){
      return(FALSE);
    }
    i <- i + 1;
  }
  return(TRUE);
}
isPalindrom(10)
isPalindrom(101)
isPalindrom(102)
isPalindrom(1001)
isPalindrom(10301)
isPalindrom(103010)
isPalindrom <- function(x){
  #as.character() или toString()
  c <- toString(x);
  i <- 1;
  while(i<=nchar(c)/2){
    if(substr(c, i, i) != substr(c, nchar(c) - i + 1,  nchar(c) - i + 1)){
      return(FALSE);
    }
    i <- i + 1;
  }
  return(TRUE);
}
bigPalindrom <- function(x){
  verxPredel <- 10^x - 1;
  nizhPredel <- 10^(x-1) - 1;
  i <- verxPredel;
  palin <- 0;
  while(i>nizhPredel){
    j <- verxPredel;
    if(i%%11==0 | j%%11==0){
      while(j>nizhPredel){
        if(isPalindrom(i*j) & palin < i*j){
          palin <- i*j;
        }
        j <- j - 1;
      }
    }
    i <- i - 1;
  }
  return(palin);
}
bigPalindrom(2)
bigPalindrom(3)
bigPalindrom(4)
q()
paste("Следую", i)
i
q()
m <- matrix(1:19, 20, 20)
m
prod4PoStrokam <- function(m){
  prod4S <- matrix(0, 20, 17);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[j,];
    i <- 1;
    while (i<=razmernost[2]){
      print(v[i:(i+3)]);
      prod4S[j,i] <- prod(v[i:(i+3)]);
      i <- i + 1;
     }
     print(j);
     j <- j + 1;
   }
 return(prod4S);
}
prod <- prod4PoStrokam(m)
prod
m
v <- m[,2]
v
prod4PoStolbcam <- function(m){
  prod4S <- matrix(0, 17, 20);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[,j];
    i <- 1;
    while (i<=razmernost[2]){
      #print(v[i:(i+3)]);
      prod4S[i,j] <- prod(v[i:(i+3)]);
      i <- i + 1;
     }
     #print(j);
     j <- j + 1;
   }
 return(prod4S);
}
prodSb <- prod4PoStolbcam(m)
prod4PoStolbcam
prod4PoStolbcam <- function(m){
  prod4S <- matrix(0, 17, 20);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[,j];
    i <- 1;
    while (i<=razmernost[2]){
      #print(v[i:(i+3)]);
      prod4S[j,i] <- prod(v[i:(i+3)]);
      i <- i + 1;
     }
     #print(j);
     j <- j + 1;
   }
 return(prod4S);
}
prodST<-prod4PoStolbcam(m)
prodST
prod4PoStolbcam <- function(m){
  prod4S <- matrix(0, 20, 17);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[,j];
    i <- 1;
    while (i<=razmernost[2]){
      #print(v[i:(i+3)]);
      prod4S[j,i] <- prod(v[i:(i+3)]);
      i <- i + 1;
     }
     #print(j);
     j <- j + 1;
   }
 return(prod4S);
}
prodS <- prod4PoStolbcam(m)
prodS
list <- c(1:4, 5, "abc")
list
ls
prod4PoStolbcam <- function(m){
  prod4S <- matrix(0, 20, 17);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[,j];
    i <- 1;
    while (i<=razmernost[2]){
      max<-prod(v[i:(i+3)]);
      prod4S[j,i] <- prod(v[i:(i+3)]);
      if (max<prod(v[i:(i+3)])){
        max <- prod(v[i:(i+3)]);
        vecMax <- v[i:(i+3)];
      }
      i <- i + 1;
     }
     #print(j);
     j <- j + 1;
   }
 return(list(max = max, vectorMax = vecMax));
}
prod <- prod4PoStolbcam(m)
prod4PoStolbcam <- function(m){
  prod4S <- matrix(0, 20, 17);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[,j];
    i <- 1;
    max <- prod(v[i:(i+3)]);
    while (i<=razmernost[2]){
      prod4S[j,i] <- prod(v[i:(i+3)]);
      if (max < prod(v[i:(i+3)])){
        max <- prod(v[i:(i+3)]);
        vecMax <- v[i:(i+3)];
      }
      i <- i + 1;
     }
     #print(j);
     j <- j + 1;
   }
 return(list(max = max, vectorMax = vecMax));
}
prod <- prod4PoStolbcam(m)
prod
prod4PoStrokam <- function(m){
  prod4S <- matrix(0, 20, 17);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[j,];
    i <- 1;
    max<-prod(v[i:(i+3)]);
    while (i<=razmernost[2]){
      prod4S[j,i] <- prod(v[i:(i+3)]);
      if (max < prod(v[i:(i+3)])){
        max <- prod(v[i:(i+3)]);
        vecMax <- v[i:(i+3)];
      }
      i <- i + 1;
     }
     #print(j);
     j <- j + 1;
   }
 return(list(max = max, vectorMax = vecMax));
}
prodS <- prod4PoStrokam(m)
prodS
q()
x <- read.table("/home/gleb/Escritorio/matrix");
m <- as.matrix(x);
prod4PoStrokam <- function(m){
  prod4S <- matrix(0, 20, 17);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[j,];
    i <- 1;
    max<-prod(v[i:(i+3)]);
    vecMax <- v[i:(i+3)];
    while (i<=razmernost[2]){
      prod4S[j,i] <- prod(v[i:(i+3)]);
      if (max < prod(v[i:(i+3)])){
        max <- prod(v[i:(i+3)]);
        vecMax <- v[i:(i+3)];
      }
      i <- i + 1;
     }
     #print(j);
     j <- j + 1;
   }
 return(list(max = max, vectorMax = vecMax));
}
prod4PoStolbcam <- function(m){
  prod4S <- matrix(0, 20, 17);
  razmernost <- dim(prod4S);
  j <- 1;
  while (j<=razmernost[1]){
    #print(prod4S);
    v <- m[,j];
    i <- 1;
    max <- prod(v[i:(i+3)]);
    while (i<=razmernost[2]){
      prod4S[j,i] <- prod(v[i:(i+3)]);
      if (max < prod(v[i:(i+3)])){
        max <- prod(v[i:(i+3)]);
        vecMax <- v[i:(i+3)];
      }
      i <- i + 1;
     }
     #print(j);
     j <- j + 1;
   }
 return(list(max = max, vectorMax = vecMax));
}
prod4diag <- function(m){
  j <- 1;
  d <- 20 + row(m) - col(m);
  list <- split(m,d);
  max <- 0;
  while (j<=length(list)){
    v <- unlist(list[j]);
    #print(v);
    i <- 1;
    while ( (i<=length(v) - 3) && (length(v)>4) ){
      if (max < prod(v[i:(i+3)])){
        #print(paste0("индикатор",i));
        max <- prod(v[i:(i+3)]);
        vecMax <- v[i:(i+3)];
      }
      i <- i + 1;
     }
     j <- j + 1;
   }
 return(list(max = max, vectorMax = vecMax));
}
prod4Adiag <- function(m){
  j <- 1;
  colminus <- sqrt(length(m)) + 1 - col(m);
  d <- 20 + row(m) - colminus;
  list <- split(m,d);
  max <- 0;
  while (j<=length(list)){
    v <- unlist(list[j]);
    #print(v);
    i <- 1;
    while ( (i<=length(v) - 3) && (length(v)>4) ){
      if (max < prod(v[i:(i+3)])){
        #print(paste0("индикатор",i));
        max <- prod(v[i:(i+3)]);
        vecMax <- v[i:(i+3)];
      }
      i <- i + 1;
     }
     j <- j + 1;
   }
 return(list(max = max, vectorMax = vecMax));
}
maximus <- function(m){
  Diagonal = c("Stolbcam", "Strokam", "Diagonal", "Adiag");
  max <- c(prod4PoStolbcam(m)$max, prod4PoStrokam(m)$max, prod4diag(m)$max, prod4Adiag(m)$max );
  #vecMax <- c(prod4PoStolbcam(m)$vec, prod4PoStrokam(m)$vec, prod4diag(m)$vec, prod4Adiag(m)$vec);
  df <- data.frame(Diagonal, max, stringsAsFactors = F);
  #list <- list(Strokam = prod4PoStrokam(m), Stolbcam = prod4PoStolbcam(m), Diagonal = prod4diag(m), Adiag = prod4Adiag(m));
 return(df);
}
maximus(m)
q()
